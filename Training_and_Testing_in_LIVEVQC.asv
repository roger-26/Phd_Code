clc;
close all;
clear all;

%con este código entreno en la LIVE-VQC y pruebo con la misma base de datos. Usando un esquema de
%80-20.

Training_Percentage = 0.8;
Test_Percentaje = 0.2;


%loading data from LIVEVQC dataset
data_LIVEVQC= load('G:\datasets\LIVEVQCPrerelease\LIVE_VQC_YCbCr_8Frames_C3D_Features\data_LIVEVQC.mat');
MOS_LIVEVQC= load('G:\datasets\LIVEVQCPrerelease\LIVE_VQC_YCbCr_8Frames_C3D_Features\MOS_LIVEVQC.mat');
data_LIVEVQC=data_LIVEVQC.LIVEVQC_Data_Averaged;
MOS_LIVEVQC = MOS_LIVEVQC.MOS_LIVE_VQC;



[trainInd,valInd,testInd] = dividerand(585,Training_Percentage,0,Test_Percentaje); %Divido aleatoriamente el 80% de la base de datos
%para entrenamiento

Training_Data = data_LIVEVQC(trainInd,:);
Training_MOS = MOS_LIVEVQC (trainInd);

Test_Data = data_LIVEVQC(testInd,:);
Test_MOS = MOS_LIVEVQC (testInd)';


Mdl=fitrsvm(Training_Data,Training_MOS,'Standardize',...
    false,...
    'OptimizeHyperparameters',...
    {'BoxConstraint', 'Epsilon', 'KernelFunction'},...
    'CacheSize','maximal',...
    'HyperparameterOptimizationOptions',struct('UseParallel',1,'MaxObjectiveEvaluations',10,...
    'ShowPlots',false));

yfit_LIVE= predict(Mdl,Test_Data);
R_LIVE = corrcoef(yfit_LIVE,Test_MOS);

yfit_SameTraining= predict(Mdl,Training_Data);
R_LIVE = corrcoef(yfit_SameTraining,Training_MOS);



